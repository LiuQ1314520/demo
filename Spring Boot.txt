***************************   Spring Boot   **********************************
### Spring Web MVC Framework
1. @Controller, @RestController, @RequestMapping

	@RestController
	@RequestMapping(value="/users")
	public class MyRestController {
		
		@RequestMapping(value="/{user}, method=RequestMethod.GET)
		public User getUser(@PathVariable Long user) {
			// ...
		}
		
		@RequestMapping(value="/{user}/customers" method=RequestMethod.GET)
		List<Coustomer> getUserCustomer(@PathVariable Long user) {
			// ...
		}
	}
	
2. Spring MVC Auto_configuration
	ContentNegotiatingViewResolver, BeanNameViewResolver
	Converter, GenericConverter, Formatter
	HttpMessageConverters
	MessageCodesResolver
	ConfigurableWebBindingInitializer
	
	
3. HttpMessageConverters
		
		@Configuration
		public class MyConfiguration {
			@Bean
			public HttpMessageConverters customerConverters () {
			
				HttpMessageConverters<?> additional = ...
				HttpMessageConverters<?> another = ...
			
				return new HttpMessageConverters(additional, another);
			}
		}
		
4. 	Custom JSON Serializers and Deserializer

	@JsonComponent
	public class Example {
		public static class Serializer extends JsonSerializer<SomeObject> {
			// ...
		}
		
		public static class Deserializer extends JsonDeserializer<SomeObject> {
			// ...
		}
	}


5. Error Handling
	@ControllerAdvice(basePackageClasses=AcmeController.class)
	public class AcmeControllerAdvice extends ResponseEntityExceptionHandler {
	
		@ExceptionHandler(YourException.class)
		@ResponseBody
		ResponseEntity<?> handleControllerException(HttpServletRequest requst, Throwable ex) {
			HttpStatus status = getStatus(request);
			return new ResponseEntity<>(new CustomErrorType(status.value(), ex.getMessage()), status);
		}
		
		private HttpStatus getStatus(HttpServletRequest request) {
			Integer statusCode = (Integer) request.getAttribute("javax.servlet.error.status_code");
			if(statusCode == null) {
				return HttpStatus.INTERNAL_SERVER_ERROR;
			}
			return HttpStatus.valueof
		}
	}